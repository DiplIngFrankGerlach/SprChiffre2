  Import 
  {
      "Strings.ad",
      "System.ad",
      "SuperEnigma.ad"  
  }


void Rotor::initialize(&String_16 key,*char piFeld[], int piIndex)
{
    for(var int i=0; i < 256; i++)
    {
       funktion[i] = cast(char,i);
    }

    var int schluesselAbtaster = 0;
    for(var int i=0; i < 256; i++)
    {
       var char k = key.getAt(schluesselAbtaster);
       var int kInt = cast(int,k) + 128;
       var char save = funktion[kInt];
       funktion[ kInt ] = funktion[ i ];
       funktion[ i ] = save;
       schluesselAbtaster++;
       if( schluesselAbtaster == key.length() ) { schluesselAbtaster = 0; }
    }

    //weitere Permutation auf Basis PI und piIndex
    for(var int i=0; i < 256; i++)
    {
       var int piInt = cast(int,piFeld[(i+piIndex) & 8191]) + 128;
       var char save = funktion[piInt];
       funktion[ piInt ] = funktion[ i ];
       funktion[ i ] = save;
    }

}

CoreEnigma::CoreEnigma(&String_16 schluessel_i)
{
   schluessel.assign(schluessel_i);
}

void CoreEnigma::init()
{
   for(var int i=0; i < rotors.sz; i++)
   {
       rotors[i].initialize(schluessel,piFeld,i*256);
       staende[i] = 0;
   }
}

char CoreEnigma::encrypt(char c)
{
   var int rsm1 = rotors.sz - 1;
   for(var int i=0; i < rotors.sz; i++)
   {
       c = rotors[i].funktion[ (cast(int,c) + 128 + staende[i]) & 255];
       staende[i]++;
       var int j=i;
       while( (staende[j] == 256) && (j  < rsm1) )
       {
          staende[j] = 0;
          staende[j+1]++;          
          j++;
       }
   }
   return c;
}


void CoreEnigma::ladePiFeld()
{
   var int i=0;
   piFeld = new char[8192];
   piFeld[i] = cast(char,0x00000065);i++;
   piFeld[i] = cast(char,0x00000004);i++;
   piFeld[i] = cast(char,0x00000028);i++;
   piFeld[i] = cast(char,0x000000c5);i++;
   piFeld[i] = cast(char,0x000000a5);i++;
   piFeld[i] = cast(char,0x000000d6);i++;
   piFeld[i] = cast(char,0x00000099);i++;
   piFeld[i] = cast(char,0x00000009);i++;
   piFeld[i] = cast(char,0x0000001a);i++;
   piFeld[i] = cast(char,0x0000004a);i++;
   piFeld[i] = cast(char,0x000000f2);i++;
   piFeld[i] = cast(char,0x000000bc);i++;
   piFeld[i] = cast(char,0x00000095);i++;
   piFeld[i] = cast(char,0x000000b7);i++;
   piFeld[i] = cast(char,0x00000042);i++;
   piFeld[i] = cast(char,0x00000027);i++;
   piFeld[i] = cast(char,0x00000026);i++;
   piFeld[i] = cast(char,0x000000ae);i++;
   piFeld[i] = cast(char,0x00000005);i++;
   piFeld[i] = cast(char,0x000000e9);i++;
   piFeld[i] = cast(char,0x00000037);i++;
   piFeld[i] = cast(char,0x000000cc);i++;
   piFeld[i] = cast(char,0x0000006e);i++;
   piFeld[i] = cast(char,0x00000058);i++;
   piFeld[i] = cast(char,0x000000b6);i++;
   piFeld[i] = cast(char,0x000000eb);i++;
   piFeld[i] = cast(char,0x000000f6);i++;
   piFeld[i] = cast(char,0x000000a6);i++;
   piFeld[i] = cast(char,0x00000079);i++;
   piFeld[i] = cast(char,0x000000fc);i++;
   piFeld[i] = cast(char,0x0000009d);i++;
   piFeld[i] = cast(char,0x000000bc);i++;
   piFeld[i] = cast(char,0x0000006a);i++;
   piFeld[i] = cast(char,0x00000028);i++;
   piFeld[i] = cast(char,0x0000009f);i++;
   piFeld[i] = cast(char,0x00000083);i++;
   piFeld[i] = cast(char,0x0000001d);i++;
   piFeld[i] = cast(char,0x000000b0);i++;
   piFeld[i] = cast(char,0x00000090);i++;
   piFeld[i] = cast(char,0x000000a3);i++;
   piFeld[i] = cast(char,0x000000fe);i++;
   piFeld[i] = cast(char,0x000000d9);i++;
   piFeld[i] = cast(char,0x00000006);i++;
   piFeld[i] = cast(char,0x000000d8);i++;
   piFeld[i] = cast(char,0x00000087);i++;
   piFeld[i] = cast(char,0x00000031);i++;
   piFeld[i] = cast(char,0x00000053);i++;
   piFeld[i] = cast(char,0x000000d8);i++;
   piFeld[i] = cast(char,0x0000008d);i++;
   piFeld[i] = cast(char,0x00000017);i++;
   piFeld[i] = cast(char,0x00000006);i++;
   piFeld[i] = cast(char,0x0000008c);i++;
   piFeld[i] = cast(char,0x0000002f);i++;
   piFeld[i] = cast(char,0x000000cb);i++;
   piFeld[i] = cast(char,0x00000025);i++;
   piFeld[i] = cast(char,0x0000005d);i++;
   piFeld[i] = cast(char,0x0000009c);i++;
   piFeld[i] = cast(char,0x000000e6);i++;
   piFeld[i] = cast(char,0x000000f3);i++;
   piFeld[i] = cast(char,0x00000063);i++;
   piFeld[i] = cast(char,0x00000022);i++;
   piFeld[i] = cast(char,0x000000e5);i++;
   piFeld[i] = cast(char,0x000000f0);i++;
   piFeld[i] = cast(char,0x000000e9);i++;
   piFeld[i] = cast(char,0x00000099);i++;
   piFeld[i] = cast(char,0x00000050);i++;
   piFeld[i] = cast(char,0x0000005e);i++;
   piFeld[i] = cast(char,0x000000c4);i++;
   piFeld[i] = cast(char,0x00000077);i++;
   piFeld[i] = cast(char,0x0000007d);i++;
   piFeld[i] = cast(char,0x0000001d);i++;
}

 
